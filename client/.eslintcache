[{"/home/kazuki/go/src/SNS/client/src/index.tsx":"1","/home/kazuki/go/src/SNS/client/src/reportWebVitals.ts":"2","/home/kazuki/go/src/SNS/client/src/App.tsx":"3","/home/kazuki/go/src/SNS/client/src/containers/Wrapper/ScrollToTop.tsx":"4","/home/kazuki/go/src/SNS/client/src/containers/Footer/index.tsx":"5","/home/kazuki/go/src/SNS/client/src/containers/SignIn/index.tsx":"6","/home/kazuki/go/src/SNS/client/src/containers/Header/index.tsx":"7","/home/kazuki/go/src/SNS/client/src/containers/Room/index.tsx":"8","/home/kazuki/go/src/SNS/client/src/containers/Talk/index.tsx":"9","/home/kazuki/go/src/SNS/client/src/containers/Top/index.tsx":"10","/home/kazuki/go/src/SNS/client/src/containers/Footer/DrawerItems.tsx":"11","/home/kazuki/go/src/SNS/client/src/containers/Room/Bubble.tsx":"12","/home/kazuki/go/src/SNS/client/src/containers/Room/KeyBoard.tsx":"13","/home/kazuki/go/src/SNS/client/src/store/index.tsx":"14","/home/kazuki/go/src/SNS/client/src/store/AuthReducer.tsx":"15","/home/kazuki/go/src/SNS/client/src/store/UserReducer.tsx":"16","/home/kazuki/go/src/SNS/client/src/serviceClient/index.tsx":"17","/home/kazuki/go/src/SNS/client/src/proto/services_pb_service.js":"18","/home/kazuki/go/src/SNS/client/src/proto/messages_pb.js":"19","/home/kazuki/go/src/SNS/client/src/proto/services_pb.js":"20","/home/kazuki/go/src/SNS/client/src/proto/enums_pb.js":"21","/home/kazuki/go/src/SNS/client/src/actions/index.tsx":"22","/home/kazuki/go/src/SNS/client/src/containers/MyPage/index.tsx":"23"},{"size":569,"mtime":1615173001937,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":1613972059331,"results":"26","hashOfConfig":"25"},{"size":1068,"mtime":1613972059331,"results":"27","hashOfConfig":"25"},{"size":251,"mtime":1613972059331,"results":"28","hashOfConfig":"25"},{"size":701,"mtime":1613972059331,"results":"29","hashOfConfig":"25"},{"size":2111,"mtime":1617844396000,"results":"30","hashOfConfig":"25"},{"size":2248,"mtime":1617844395996,"results":"31","hashOfConfig":"25"},{"size":1551,"mtime":1613972059331,"results":"32","hashOfConfig":"25"},{"size":3802,"mtime":1613972059331,"results":"33","hashOfConfig":"25"},{"size":605,"mtime":1613972059331,"results":"34","hashOfConfig":"25"},{"size":1151,"mtime":1613972059331,"results":"35","hashOfConfig":"25"},{"size":881,"mtime":1613972059331,"results":"36","hashOfConfig":"25"},{"size":1480,"mtime":1613972059331,"results":"37","hashOfConfig":"25"},{"size":389,"mtime":1615173001937,"results":"38","hashOfConfig":"25"},{"size":667,"mtime":1617589129504,"results":"39","hashOfConfig":"25"},{"size":1073,"mtime":1617589129508,"results":"40","hashOfConfig":"25"},{"size":1652,"mtime":1617589129504,"results":"41","hashOfConfig":"25"},{"size":11309,"mtime":1615177017702,"results":"42","hashOfConfig":"25"},{"size":146315,"mtime":1615177017702,"results":"43","hashOfConfig":"25"},{"size":548,"mtime":1615177017702,"results":"44","hashOfConfig":"25"},{"size":1072,"mtime":1615177017702,"results":"45","hashOfConfig":"25"},{"size":2682,"mtime":1617844395996,"results":"46","hashOfConfig":"25"},{"size":1170,"mtime":1617848312831,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1equj8v",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},"/home/kazuki/go/src/SNS/client/src/index.tsx",[],["104","105"],"/home/kazuki/go/src/SNS/client/src/reportWebVitals.ts",[],"/home/kazuki/go/src/SNS/client/src/App.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/Wrapper/ScrollToTop.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/Footer/index.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/SignIn/index.tsx",["106"],"import React from 'react'\nimport styled from 'styled-components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport { signIn, user } from '../../actions'\n\nconst SignIn: React.FC = () => {\n  const [handle, setHandle] = React.useState(\"\")\n  const [pw, setPw] = React.useState(\"\")\n  const auth = useSelector((state: any) => state.auth);\n  const dispatch = useDispatch()\n  const classes = useStyles()\n\n  const onChangeHandle = (e: any) => {\n    setHandle(e.target.value)\n  }\n  const onChangePassword = (e: any) => {\n    setPw(e.target.value)\n  }\n  const handleSignin = () => dispatch(\n    // setAuth({isAuthenticated: true, token:'aaa'})\n    signIn({handle, pw})\n  )\n  const handleUser = () => dispatch(\n    // setAuth({isAuthenticated: true, token:'aaa'})\n    user({token:auth.list[0].token})\n  )\n\n  return (\n    <Root>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <div>\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"User\"\n            variant=\"outlined\"\n            onChange={onChangeHandle}\n          />\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"Password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            variant=\"outlined\"\n            onChange={onChangePassword}\n          />\n        </div>\n      </form>\n      <Button variant=\"contained\" color=\"secondary\" onClick={handleSignin}>\n        サインイン\n      </Button>\n      <Button variant=\"contained\" color=\"secondary\" onClick={handleUser}>\n        ユーザ\n      </Button>\n    </Root>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  }),\n);\n\n\nconst Root = styled.div`\n  margin: auto;\n  padding-top: 80px;\n  padding-bottom: 50px;\n`\n\nexport default SignIn","/home/kazuki/go/src/SNS/client/src/containers/Header/index.tsx",["107"],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button';\nimport Toolbar from '@material-ui/core/Toolbar'\nimport GitHubIcon from '@material-ui/icons/GitHub'\n\nimport { signOut } from '../../actions'\n\n\nconst Header: React.FC = () => {\n    const classes = useStyles()\n    const auth = useSelector((state: any) => state.auth);\n    var isAuth = false\n    if (auth.list.length>0) {\n        isAuth = auth.list[auth.list.length-1].isAuthenticated\n    }\n\n\n    return (\n        <>\n            <div>\n                <AppBar position=\"fixed\" color=\"secondary\">\n                    <Toolbar>\n                        <StyledLink to=\"/\">\n                            <GitHubIcon />チャット\n                        </StyledLink>\n                        <ButtonSwitch isAuth={isAuth}/>\n                        {/* <ButtonLink to=\"/signin\">\n                            <Button className={classes.button}>\n                                SignIn\n                            </Button>\n                        </ButtonLink> */}\n                    </Toolbar>\n                </AppBar>\n            </div>\n        </>\n    )\n}\n\ninterface Props {\n    isAuth: boolean,\n}\n\nconst ButtonSwitch: React.FC<Props> = (props) => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const handleSignOut = () => dispatch(\n        signOut()\n    )\n    if (props.isAuth){\n        return (\n            <ButtonLink to=\"/mypage\">\n                <Button className={classes.button} onClick={handleSignOut}>\n                    SignOut\n                </Button>\n            </ButtonLink>\n        );\n    }\n    return (\n    <ButtonLink to=\"/signin\">\n        <Button className={classes.button}>\n            SignIn\n        </Button>\n    </ButtonLink>\n    );\n}\n\nconst useStyles = makeStyles({\n    button: {\n      color: 'white',\n    },\n});\n\n\nconst StyledLink = styled(Link)`\n    margin: auto;\n    text-decoration: none;\n    color: white;\n`\n\nconst ButtonLink = styled(Link)`\n    text-decoration: none;\n`\n\nexport default Header","/home/kazuki/go/src/SNS/client/src/containers/Room/index.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/Talk/index.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/Top/index.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/Footer/DrawerItems.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/Room/Bubble.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/Room/KeyBoard.tsx",[],"/home/kazuki/go/src/SNS/client/src/store/index.tsx",[],"/home/kazuki/go/src/SNS/client/src/store/AuthReducer.tsx",["108"],"import { List } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\n// import { iSignin } from '../serviceClient'\n\ninterface Auth {\n    isAuthenticated: boolean;\n    token: string;\n}\n\ninterface AuthState {\n    nextAuthId: number;\n    list: Auth[];\n};\n\n// Stateの初期状態\nconst initialAuthState:AuthState = {\n    nextAuthId: 0,\n    list: [],\n};\n\n// Sliceを生成する\nconst slice = createSlice({\n    name: 'Auth',\n    initialState:initialAuthState,\n    reducers: {\n        setAuth: (state, action)=>{\n            state.list.push(action.payload)\n        },\n    }\n});\n\nexport default slice.reducer;\nexport const { setAuth } = slice.actions;","/home/kazuki/go/src/SNS/client/src/store/UserReducer.tsx",["109"],"import { createSlice } from '@reduxjs/toolkit';\n// Stateの初期状態\nconst initialState = {\n    id: 0,\n    handle: '',\n    name: '',\n    birthday: '',\n    profile: '',\n    isPrivate: true,\n};\n\ninterface User {\n    id: number\n    handle: string\n    name: string\n    birthday: string\n    profile: string\n    isPrivate: boolean\n}\n\ninterface UserState {\n    nextUserId: number;\n    list: User[];\n};\n\n// Stateの初期状態\nconst initialUserState:UserState = {\n    nextUserId: 0,\n    list: [],\n};\n\n\n// Sliceを生成する\nconst slice = createSlice({\n    name: 'User',\n    initialState: initialUserState,\n    reducers: {\n        setUser: (state, action)=>{\n            state.list.push(action.payload)\n        },\n        clearUser: state=>{\n            return Object.assign({}, state, {\n                id: 0,\n                handle: '',\n                name: '',\n                birthday: '',\n                profile: '',\n                isPrivate: true,\n            })\n        },\n    }\n});\n\nexport default slice.reducer;\nexport const { setUser, clearUser } = slice.actions;","/home/kazuki/go/src/SNS/client/src/serviceClient/index.tsx",["110"],"import { ServiceClient } from '../proto/services_pb_service';\nimport pb from '../proto/messages_pb';\nimport { grpc } from '@improbable-eng/grpc-web';\nimport { List } from '@material-ui/core';\nimport { rejects } from 'assert';\n\n// export type ServiceClientAttached = {\n//   client: ServiceClient;\n// };\n\nconst client = new ServiceClient('http://localhost:80', {});\n\n// const serviceClient = <P extends {}>(WrappedComponent: React.ComponentType<P & ServiceClientAttached>) =>\n//   class MessageServiceAttached extends React.Component<P> {\n//   render() {\n//     return <WrappedComponent {...this.props} client={client} />;\n//   }\n// };\n\nexport interface iSignin {\n  handle: string,\n  pw: string\n}\n\nclass serviceClient {\n  public signinRequest = (args: iSignin) => {\n    return new Promise(resolve =>{\n      const req = new pb.SignInRequest()\n      req.setHandle(args.handle)\n      req.setPassword(args.pw)\n      client.signIn(req,  (err: any, res: any) => {\n        if (err || res === null) {\n            throw err\n        }\n        resolve(res)\n      })\n    })\n\n  }\n\n  public userRequest = (token: string) => {\n    return new Promise(resolve =>{\n      const req = new pb.UserRequest()\n      const meta = new grpc.Metadata();\n      meta.set('authorization', 'Bearer '+token);\n      const deadline = new Date();\n      deadline.setSeconds(deadline.getSeconds() + 10);\n      meta.set('deadline', deadline.getTime().toString());\n      console.log(meta)\n\n      client.user(req, meta, (err: any, res: any) => {\n        if (err || res === null) {\n            rejects(err)\n        }\n        resolve(res)\n      })\n    })\n\n  }\n}\n\nexport default new serviceClient()","/home/kazuki/go/src/SNS/client/src/proto/services_pb_service.js",["111"],"// package: services\n// file: services.proto\n\nvar services_pb = require(\"./services_pb\");\nvar messages_pb = require(\"./messages_pb\");\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar Service = (function () {\n  function Service() {}\n  Service.serviceName = \"services.Service\";\n  return Service;\n}());\n\nService.SignIn = {\n  methodName: \"SignIn\",\n  service: Service,\n  requestStream: false,\n  responseStream: false,\n  requestType: messages_pb.SignInRequest,\n  responseType: messages_pb.SignInResponse\n};\n\nService.User = {\n  methodName: \"User\",\n  service: Service,\n  requestStream: false,\n  responseStream: false,\n  requestType: messages_pb.UserRequest,\n  responseType: messages_pb.UserResponse\n};\n\nService.CreateGroup = {\n  methodName: \"CreateGroup\",\n  service: Service,\n  requestStream: false,\n  responseStream: false,\n  requestType: messages_pb.CreateGroupRequest,\n  responseType: messages_pb.CreateGroupResponse\n};\n\nService.Followers = {\n  methodName: \"Followers\",\n  service: Service,\n  requestStream: false,\n  responseStream: false,\n  requestType: messages_pb.FollowersRequest,\n  responseType: messages_pb.FollowersResponse\n};\n\nService.GetGroups = {\n  methodName: \"GetGroups\",\n  service: Service,\n  requestStream: false,\n  responseStream: false,\n  requestType: messages_pb.GetGroupsRequest,\n  responseType: messages_pb.GetGroupsResponse\n};\n\nService.GetInvitedGroups = {\n  methodName: \"GetInvitedGroups\",\n  service: Service,\n  requestStream: false,\n  responseStream: false,\n  requestType: messages_pb.GetInvitedGroupsRequest,\n  responseType: messages_pb.GetInvitedGroupsResponse\n};\n\nService.JoinInvitedGroups = {\n  methodName: \"JoinInvitedGroups\",\n  service: Service,\n  requestStream: false,\n  responseStream: false,\n  requestType: messages_pb.JoinInvitedGroupsRequest,\n  responseType: messages_pb.JoinInvitedGroupsResponse\n};\n\nService.InviteToGroup = {\n  methodName: \"InviteToGroup\",\n  service: Service,\n  requestStream: false,\n  responseStream: false,\n  requestType: messages_pb.InviteToGroupRequest,\n  responseType: messages_pb.InviteToGroupResponse\n};\n\nService.Message = {\n  methodName: \"Message\",\n  service: Service,\n  requestStream: true,\n  responseStream: false,\n  requestType: messages_pb.MessageRequest,\n  responseType: messages_pb.MessageResponse\n};\n\nService.Receive = {\n  methodName: \"Receive\",\n  service: Service,\n  requestStream: false,\n  responseStream: true,\n  requestType: messages_pb.ReceivedRequest,\n  responseType: messages_pb.ReceivedResponse\n};\n\nexports.Service = Service;\n\nfunction ServiceClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nServiceClient.prototype.signIn = function signIn(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Service.SignIn, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.user = function user(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Service.User, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.createGroup = function createGroup(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Service.CreateGroup, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.followers = function followers(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Service.Followers, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.getGroups = function getGroups(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Service.GetGroups, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.getInvitedGroups = function getInvitedGroups(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Service.GetInvitedGroups, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.joinInvitedGroups = function joinInvitedGroups(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Service.JoinInvitedGroups, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.inviteToGroup = function inviteToGroup(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Service.InviteToGroup, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.message = function message(metadata) {\n  var listeners = {\n    end: [],\n    status: []\n  };\n  var client = grpc.client(Service.Message, {\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport\n  });\n  client.onEnd(function (status, statusMessage, trailers) {\n    listeners.status.forEach(function (handler) {\n      handler({ code: status, details: statusMessage, metadata: trailers });\n    });\n    listeners.end.forEach(function (handler) {\n      handler({ code: status, details: statusMessage, metadata: trailers });\n    });\n    listeners = null;\n  });\n  return {\n    on: function (type, handler) {\n      listeners[type].push(handler);\n      return this;\n    },\n    write: function (requestMessage) {\n      if (!client.started) {\n        client.start(metadata);\n      }\n      client.send(requestMessage);\n      return this;\n    },\n    end: function () {\n      client.finishSend();\n    },\n    cancel: function () {\n      listeners = null;\n      client.close();\n    }\n  };\n};\n\nServiceClient.prototype.receive = function receive(requestMessage, metadata) {\n  var listeners = {\n    data: [],\n    end: [],\n    status: []\n  };\n  var client = grpc.invoke(Service.Receive, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onMessage: function (responseMessage) {\n      listeners.data.forEach(function (handler) {\n        handler(responseMessage);\n      });\n    },\n    onEnd: function (status, statusMessage, trailers) {\n      listeners.status.forEach(function (handler) {\n        handler({ code: status, details: statusMessage, metadata: trailers });\n      });\n      listeners.end.forEach(function (handler) {\n        handler({ code: status, details: statusMessage, metadata: trailers });\n      });\n      listeners = null;\n    }\n  });\n  return {\n    on: function (type, handler) {\n      listeners[type].push(handler);\n      return this;\n    },\n    cancel: function () {\n      listeners = null;\n      client.close();\n    }\n  };\n};\n\nexports.ServiceClient = ServiceClient;\n\n",["112","113"],"/home/kazuki/go/src/SNS/client/src/proto/messages_pb.js",[],"/home/kazuki/go/src/SNS/client/src/proto/services_pb.js",[],"/home/kazuki/go/src/SNS/client/src/proto/enums_pb.js",[],["114","115"],"/home/kazuki/go/src/SNS/client/src/actions/index.tsx",[],"/home/kazuki/go/src/SNS/client/src/containers/MyPage/index.tsx",["116","117","118"],"import React from 'react'\nimport styled from 'styled-components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\n\nconst MyPage: React.FC = () => {\n  const user = useSelector((state: any) => state.user);\n  var name = \"\";\n  var handle = \"\";\n  var birthday = \"\";\n  var profile = \"\";\n  var isPrivate = false;\n\n  if (user.list.length>0) {\n    name = user.list[user.list.length-1].name\n    handle = user.list[user.list.length-1].handle\n    birthday = user.list[user.list.length-1].birthday\n    profile = user.list[user.list.length-1].profile\n    isPrivate = user.list[user.list.length-1].isPrivate\n  }\n\n  return (\n    <Root>\n      <div>名前: {name}</div>\n      <div>ID: {handle}</div>\n      <div>誕生日: {birthday}</div>\n      <div>プロフィール: {profile}</div>\n    </Root>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  }),\n);\n\n\nconst Root = styled.div`\n  margin: auto;\n  padding-top: 80px;\n  padding-bottom: 50px;\n`\n\nexport default MyPage",{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":8,"column":18,"nodeType":"125","messageId":"126","endLine":8,"endColumn":22},{"ruleId":"123","severity":1,"message":"127","line":16,"column":11,"nodeType":"125","messageId":"126","endLine":16,"endColumn":18},{"ruleId":"123","severity":1,"message":"128","line":1,"column":10,"nodeType":"125","messageId":"126","endLine":1,"endColumn":14},{"ruleId":"123","severity":1,"message":"129","line":3,"column":7,"nodeType":"125","messageId":"126","endLine":3,"endColumn":19},{"ruleId":"123","severity":1,"message":"128","line":4,"column":10,"nodeType":"125","messageId":"126","endLine":4,"endColumn":14},{"ruleId":"130","severity":1,"message":"131","line":4,"column":5,"nodeType":"125","messageId":"126","endLine":4,"endColumn":16},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"119","replacedBy":"132"},{"ruleId":"121","replacedBy":"133"},{"ruleId":"123","severity":1,"message":"134","line":3,"column":10,"nodeType":"125","messageId":"126","endLine":3,"endColumn":21},{"ruleId":"123","severity":1,"message":"135","line":19,"column":5,"nodeType":"125","messageId":"126","endLine":19,"endColumn":14},{"ruleId":"123","severity":1,"message":"136","line":32,"column":7,"nodeType":"125","messageId":"126","endLine":32,"endColumn":16},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"@typescript-eslint/no-unused-vars","'user' is defined but never used.","Identifier","unusedVar","'classes' is assigned a value but never used.","'List' is defined but never used.","'initialState' is assigned a value but never used.","no-unused-vars","'services_pb' is assigned a value but never used.",["137"],["138"],"'useDispatch' is defined but never used.","'isPrivate' is assigned a value but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]